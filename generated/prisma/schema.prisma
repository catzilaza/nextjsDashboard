generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  image_url String
  invoice   Invoices[]
}

model Invoices {
  id         String    @id @default(uuid())
  amount     Int
  status     String
  date       DateTime  @default(now())
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String?   @default("user")
  date          DateTime  @default(now())
  image_blob    Bytes?
  image_url     String?   @db.VarChar(255)
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
}

model Profile {
  id      String  @id @default(uuid())
  address String?
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id])
}

model Post {
  id         String              @id @default(cuid())
  img        String?
  title      String
  content    String?
  published  Boolean             @default(false)
  desc       String?
  createdAt  DateTime            @default(now())
  views      Int                 @default(0)
  slug       String?             @unique
  catSlug    String?
  authorId   String?
  author     User?               @relation(fields: [authorId], references: [id])
  categories CategoriesOnPosts[]
}

model Category {
  id        String              @id @default(cuid())
  title     String?
  img       String?
  desc      String?
  name      String?
  slug      String?             @unique
  createdAt DateTime            @default(now())
  posts     CategoriesOnPosts[]
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  assignedAt DateTime @default(now())
  assignedBy String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

model Revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

model products_desserts {
  dessert_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_eng   String   @db.VarChar(255)
  name       String   @db.VarChar(255)
  image_url  String   @db.VarChar(255)
  price      String   @db.VarChar(255)
  amount     Int
  status     String?  @db.VarChar(15)
  date       DateTime @db.Date
}

model File {
  id           String   @id @default(uuid())
  name         String
  path         String
  size         Int
  type         String
  fileUrl      String   @map("file_url")
  thumbnailUrl String?  @map("thumbnail_url")
  userId       String   @map("user_id")
  parentId     String?  @map("parent_id")
  isFolder     Boolean  @default(false) @map("is_folder")
  isStarred    Boolean  @default(false) @map("is_starred")
  isTrash      Boolean  @default(false) @map("is_trash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Self-relation for parent/children
  parent   File?  @relation("FileToFile", fields: [parentId], references: [id])
  children File[] @relation("FileToFile")

  @@map("files")
}
