generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  image_url String
  invoice   Invoices[]
}

model Invoices {
  id         String    @id @default(uuid())
  amount     Int
  status     String
  date       DateTime  @default(now())
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
}

// model Products_desserts {
//   id        String   @id @default(uuid()) @db.Uuid
//   name_eng  String   @db.VarChar(255)
//   name      String   @db.VarChar(255)
//   image_url String   @db.VarChar(255)
//   price     String   @db.VarChar(255)
//   amount    Int
//   status    String?  @db.VarChar(15)
//   date      DateTime @db.Date
// }

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String?   @default("user")
  date          DateTime  @default(now())
  image_blob    Bytes?
  image_url     String?   @db.VarChar(255)
  profile       Profile?
  post          Post[]
}

model Profile {
  id      String  @id @default(uuid())
  address String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String  @unique
}

model Post {
  id         String              @id @default(cuid())
  title      String
  desc       String?
  img        String?
  createdAt  DateTime            @default(now())
  slug       String?             @unique
  views      Int                 @default(0)
  catSlug    String?
  author     User?               @relation(fields: [authorId], references: [id])
  authorId   String?
  categories CategoriesOnPosts[]
}

model Category {
  id    String              @id @default(cuid())
  name  String
  slug  String?             @unique
  title String?
  imge  String?
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post?     @relation(fields: [postId], references: [id])
  postId     String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime  @default(now())
  assignedBy String

  @@id([postId, categoryId])
}

model Revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

// model Author {
//   id        Int      @id @default(autoincrement())
//   name      String
//   bio       String?
//   createdAt DateTime @default(now()) @map("created_at")
//   country   String?
//   books     Book[]

//   @@map("authors")
// }

// model Book {
//   id        Int      @id @default(autoincrement())
//   title     String
//   authorId  Int      @map("author_id")
//   createdAt DateTime @default(now()) @map("created_at")
//   author    Author   @relation(fields: [authorId], references: [id])

//   @@map("books")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String    @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   Comment       Comment[]
//   Post          Post[]
//   sessions      Session[]
// }

// model Comment {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   desc      String
//   userEmail String
//   postSlug  String
// }
