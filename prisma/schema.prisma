generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // For uses requiring a connection without pgbouncer
  //directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}

model customers {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String @db.VarChar(255)
  email     String @db.VarChar(255)
  image_url String @db.VarChar(255)
}

model invoices {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id String   @db.Uuid
  amount      Int
  status      String   @db.VarChar(255)
  date        DateTime @db.Date
}

model products_desserts {
  dessert_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_eng   String   @db.VarChar(255)
  name       String   @db.VarChar(255)
  image_url  String   @db.VarChar(255)
  price      String   @db.VarChar(255)
  amount     Int
  status     String?  @db.VarChar(15)
  date       DateTime @db.Date
}

model revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

model users {
  user_id    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username   String   @db.VarChar(255)
  email      String   @unique
  password   String
  status     String   @db.VarChar(255)
  role       String   @db.VarChar(255)
  date       DateTime @db.Date
  image_blob Bytes?
  image_url  String?  @db.VarChar(255)
}

model User {
  user_id       String    @id @default(cuid()) @db.Uuid
  name          String    @db.VarChar(255)
  email         String    @unique
  emailVerified DateTime? @map("email_verified") @db.Timestamp(6)
  password      String
  status        String?   @db.VarChar(255)
  role          String    @default("user") @db.VarChar(255)
  date          DateTime  @db.Date
  image_blob    Bytes?
  image_url     String?   @db.VarChar(255)
  image         String?
  address       Json?     @db.Json
  paymentMethod String?
  cart          Cart[]
  order         Order[]

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model Account {
  account_id        String  @id @default(cuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  session_id   String   @id @default(cuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  prod_id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal     @default(0) @db.Decimal(12, 2)
  rating      Decimal     @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  sizes       String[]
  colors      String[]
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt
  orderitems  OrderItem[]
}

model Cart {
  cart_id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Order {
  order_id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?     @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?
  itemsPrice      Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User?       @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [order_id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [prod_id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model UserWeb {
  id    Int       @id @default(autoincrement())
  email String    @unique
  name  String?
  posts PostWeb[]
}

model PostWeb {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int
  author    UserWeb @relation(fields: [authorId], references: [id])
}
