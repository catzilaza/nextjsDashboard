generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  image_url String
  invoice   Invoices[]
}

model Invoices {
  id         String    @id @default(uuid())
  amount     Int
  status     String
  date       DateTime  @default(now())
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String?   @default("user")
  date          DateTime  @default(now())
  image_blob    Bytes?
  name          String
  image_url     String?   @db.VarChar(255)
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  profile       Profile?
}

model Profile {
  id      String  @id @default(uuid())
  userId  String  @unique
  address String?
  user    User    @relation(fields: [userId], references: [id])
}

model Post {
  id         String              @id @default(cuid())
  createdAt  DateTime            @default(now())
  slug       String?             @unique
  title      String
  desc       String?
  img        String?
  views      Int                 @default(0)
  catSlug    String?
  authorId   String?
  categories CategoriesOnPosts[]
  author     User?               @relation(fields: [authorId], references: [id])
}

model Category {
  id    String              @id @default(cuid())
  slug  String?             @unique
  title String?
  imge  String?
  name  String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  assignedAt DateTime @default(now())
  assignedBy String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

model Revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

model products_desserts {
  dessert_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_eng   String   @db.VarChar(255)
  name       String   @db.VarChar(255)
  image_url  String   @db.VarChar(255)
  price      String   @db.VarChar(255)
  amount     Int
  status     String?  @db.VarChar(15)
  date       DateTime @db.Date
}
